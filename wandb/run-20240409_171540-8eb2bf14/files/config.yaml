wandb_version: 1

headless:
  desc: null
  value: true
save_final_state:
  desc: null
  value: true
early_stop:
  desc: null
  value: false
action_freq:
  desc: null
  value: 24
init_state:
  desc: null
  value: has_pokedex_nballs.state
max_steps:
  desc: null
  value: 12000
print_rewards:
  desc: null
  value: true
save_video:
  desc: null
  value: false
fast_video:
  desc: null
  value: true
session_path:
  desc: null
  value: Sessions/QRDQN_Session_0409171535_8eb2bf14_env2_1
gb_path:
  desc: null
  value: PokemonRed.gb
debug:
  desc: null
  value: false
reward_scale:
  desc: null
  value: 1
explore_weight:
  desc: null
  value: 0.5
battle_weight:
  desc: null
  value: 4
use_screen_explore:
  desc: null
  value: true
extra_buttons:
  desc: null
  value: false
sim_frame_dist:
  desc: null
  value: 2000000.0
_wandb:
  desc: null
  value:
    code_path: code/run_baseline_v2.py
    python_version: 3.11.8
    cli_version: 0.15.12
    framework: huggingface
    is_jupyter_run: false
    is_kaggle_kernel: true
    start_time: 1712682940.063522
    t:
      1:
      - 1
      - 2
      - 3
      - 12
      - 55
      2:
      - 1
      - 2
      - 3
      - 11
      - 12
      - 49
      - 55
      3:
      - 14
      - 16
      - 22
      - 23
      - 35
      4: 3.11.8
      5: 0.15.12
      8:
      - 2
      - 5
      13: linux-x86_64
algo:
  desc: null
  value: QRDQN
policy_class:
  desc: null
  value: <class 'sb3_contrib.qrdqn.policies.MultiInputPolicy'>
device:
  desc: null
  value: cuda
verbose:
  desc: null
  value: 1
policy_kwargs:
  desc: null
  value: '{''optimizer_class'': <class ''torch.optim.adam.Adam''>, ''optimizer_kwargs'':
    {''eps'': 0.0003125}}'
num_timesteps:
  desc: null
  value: 0
_total_timesteps:
  desc: null
  value: 39996000
_num_timesteps_at_start:
  desc: null
  value: 0
seed:
  desc: null
  value: None
action_noise:
  desc: null
  value: None
start_time:
  desc: null
  value: 1712682941155675686
learning_rate:
  desc: null
  value: 5.0e-05
tensorboard_log:
  desc: null
  value: Sessions/QRDQN_Session_0409171535_8eb2bf14_env2_1
_last_obs:
  desc: null
  value: "OrderedDict([('badges', array([[0, 0, 0, 0, 0, 0, 0, 0],\n       [0, 0,\
    \ 0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0,\
    \ 0, 0, 0],\n       [0, 0, 0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0, 0, 0],\n\
    \       [0, 0, 0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0, 0, 0]], dtype=int8)),\
    \ ('events', array([[0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0],\n\
    \       [0, 0, 0, ..., 0, 0, 0],\n       ...,\n       [0, 0, 0, ..., 0, 0, 0],\n\
    \       [0, 0, 0, ..., 0, 0, 0],\n       [0, 0, 0, ..., 0, 0, 0]], dtype=int8)),\
    \ ('health', array([[1.],\n       [1.],\n       [1.],\n       [1.],\n       [1.],\n\
    \       [1.],\n       [1.],\n       [1.]])), ('level', array([[ 0.11971221,  0.23770263,\
    \  0.46177918,  0.81919157,  0.93964547,\n        -0.64299874,  0.98490333,  0.34098385],\n\
    \       [ 0.11971221,  0.23770263,  0.46177918,  0.81919157,  0.93964547,\n  \
    \      -0.64299874,  0.98490333,  0.34098385],\n       [ 0.11971221,  0.23770263,\
    \  0.46177918,  0.81919157,  0.93964547,\n        -0.64299874,  0.98490333,  0.34098385],\n\
    \       [ 0.11971221,  0.23770263,  0.46177918,  0.81919157,  0.93964547,\n  \
    \      -0.64299874,  0.98490333,  0.34098385],\n       [ 0.11971221,  0.23770263,\
    \  0.46177918,  0.81919157,  0.93964547,\n        -0.64299874,  0.98490333,  0.34098385],\n\
    \       [ 0.11971221,  0.23770263,  0.46177918,  0.81919157,  0.93964547,\n  \
    \      -0.64299874,  0.98490333,  0.34098385],\n       [ 0.11971221,  0.23770263,\
    \  0.46177918,  0.81919157,  0.93964547,\n        -0.64299874,  0.98490333,  0.34098385],\n\
    \       [ 0.11971221,  0.23770263,  0.46177918,  0.81919157,  0.93964547,\n  \
    \      -0.64299874,  0.98490333,  0.34098385]])), ('map', array([[[[0, 0, 0, ...,\
    \ 0, 0, 0],\n         [0, 0, 0, ..., 0, 0, 0],\n         [0, 0, 0, ..., 0, 0,\
    \ 0],\n         ...,\n         [0, 0, 0, ..., 0, 0, 0],\n         [0, 0, 0, ...,\
    \ 0, 0, 0],\n         [0, 0, 0, ..., 0, 0, 0]]],\n\n\n       [[[0, 0, 0, ...,\
    \ 0, 0, 0],\n         [0, 0, 0, ..., 0, 0, 0],\n         [0, 0, 0, ..., 0, 0,\
    \ 0],\n         ...,\n         [0, 0, 0, ..., 0, 0, 0],\n         [0, 0, 0, ...,\
    \ 0, 0, 0],\n         [0, 0, 0, ..., 0, 0, 0]]],\n\n\n       [[[0, 0, 0, ...,\
    \ 0, 0, 0],\n         [0, 0, 0, ..., 0, 0, 0],\n         [0, 0, 0, ..., 0, 0,\
    \ 0],\n         ...,\n         [0, 0, 0, ..., 0, 0, 0],\n         [0, 0, 0, ...,\
    \ 0, 0, 0],\n         [0, 0, 0, ..., 0, 0, 0]]],\n\n\n       ...,\n\n\n      \
    \ [[[0, 0, 0, ..., 0, 0, 0],\n         [0, 0, 0, ..., 0, 0, 0],\n         [0,\
    \ 0, 0, ..., 0, 0, 0],\n         ...,\n         [0, 0, 0, ..., 0, 0, 0],\n   \
    \      [0, 0, 0, ..., 0, 0, 0],\n         [0, 0, 0, ..., 0, 0, 0]]],\n\n\n   \
    \    [[[0, 0, 0, ..., 0, 0, 0],\n         [0, 0, 0, ..., 0, 0, 0],\n         [0,\
    \ 0, 0, ..., 0, 0, 0],\n         ...,\n         [0, 0, 0, ..., 0, 0, 0],\n   \
    \      [0, 0, 0, ..., 0, 0, 0],\n         [0, 0, 0, ..., 0, 0, 0]]],\n\n\n   \
    \    [[[0, 0, 0, ..., 0, 0, 0],\n         [0, 0, 0, ..., 0, 0, 0],\n         [0,\
    \ 0, 0, ..., 0, 0, 0],\n         ...,\n         [0, 0, 0, ..., 0, 0, 0],\n   \
    \      [0, 0, 0, ..., 0, 0, 0],\n         [0, 0, 0, ..., 0, 0, 0]]]], dtype=uint8)),\
    \ ('recent_actions', array([[0, 0, 0],\n       [0, 0, 0],\n       [0, 0, 0],\n\
    \       [0, 0, 0],\n       [0, 0, 0],\n       [0, 0, 0],\n       [0, 0, 0],\n\
    \       [0, 0, 0]], dtype=uint8)), ('screens', array([[[[  0,   0,   0, ..., \
    \  0,   0,   0],\n         [  0,   0,   0, ...,   0,   0,   0],\n         [  0,\
    \   0,   0, ...,   0,   0,   0],\n         ...,\n         [ 42, 153, 153, ...,\
    \   0,   0,   0],\n         [ 21,  76,  76, ...,   0,   0,   0],\n         [ 59,\
    \  76,  76, ...,   0,   0,   0]],\n\n        [[  0,   0,   0, ...,   0,   0, \
    \  0],\n         [  0,   0,   0, ...,   0,   0,   0],\n         [  0,   0,   0,\
    \ ...,   0,   0,   0],\n         ...,\n         [  0,   0,   0, ...,   0,   0,\
    \   0],\n         [  0,   0,   0, ...,   0,   0,   0],\n         [  0,   0,  \
    \ 0, ...,   0,   0,   0]],\n\n        [[  0,   0,   0, ...,   0,   0,   0],\n\
    \         [  0,   0,   0, ...,   0,   0,   0],\n         [  0,   0,   0, ...,\
    \   0,   0,   0],\n         ...,\n         [  0,   0,   0, ...,   0,   0,   0],\n\
    \         [  0,   0,   0, ...,   0,   0,   0],\n         [  0,   0,   0, ...,\
    \   0,   0,   0]]],\n\n\n       [[[  0,   0,   0, ...,   0,   0,   0],\n     \
    \    [  0,   0,   0, ...,   0,   0,   0],\n         [  0,   0,   0, ...,   0,\
    \   0,   0],\n         ...,\n         [ 42, 153, 153, ...,   0,   0,   0],\n \
    \        [ 21,  76,  76, ...,   0,   0,   0],\n         [ 59,  76,  76, ..., \
    \  0,   0,   0]],\n\n        [[  0,   0,   0, ...,   0,   0,   0],\n         [\
    \  0,   0,   0, ...,   0,   0,   0],\n         [  0,   0,   0, ...,   0,   0,\
    \   0],\n         ...,\n         [  0,   0,   0, ...,   0,   0,   0],\n      \
    \   [  0,   0,   0, ...,   0,   0,   0],\n         [  0,   0,   0, ...,   0, \
    \  0,   0]],\n\n        [[  0,   0,   0, ...,   0,   0,   0],\n         [  0,\
    \   0,   0, ...,   0,   0,   0],\n         [  0,   0,   0, ...,   0,   0,   0],\n\
    \         ...,\n         [  0,   0,   0, ...,   0,   0,   0],\n         [  0,\
    \   0,   0, ...,   0,   0,   0],\n         [  0,   0,   0, ...,   0,   0,   0]]],\n\
    \n\n       [[[  0,   0,   0, ...,   0,   0,   0],\n         [  0,   0,   0, ...,\
    \   0,   0,   0],\n         [  0,   0,   0, ...,   0,   0,   0],\n         ...,\n\
    \         [ 42, 153, 153, ...,   0,   0,   0],\n         [ 21,  76,  76, ...,\
    \   0,   0,   0],\n         [ 59,  76,  76, ...,   0,   0,   0]],\n\n        [[\
    \  0,   0,   0, ...,   0,   0,   0],\n         [  0,   0,   0, ...,   0,   0,\
    \   0],\n         [  0,   0,   0, ...,   0,   0,   0],\n         ...,\n      \
    \   [  0,   0,   0, ...,   0,   0,   0],\n         [  0,   0,   0, ...,   0, \
    \  0,   0],\n         [  0,   0,   0, ...,   0,   0,   0]],\n\n        [[  0,\
    \   0,   0, ...,   0,   0,   0],\n         [  0,   0,   0, ...,   0,   0,   0],\n\
    \         [  0,   0,   0, ...,   0,   0,   0],\n         ...,\n         [  0,\
    \   0,   0, ...,   0,   0,   0],\n         [  0,   0,   0, ...,   0,   0,   0],\n\
    \         [  0,   0,   0, ...,   0,   0,   0]]],\n\n\n       ...,\n\n\n      \
    \ [[[  0,   0,   0, ...,   0,   0,   0],\n         [  0,   0,   0, ...,   0, \
    \  0,   0],\n         [  0,   0,   0, ...,   0,   0,   0],\n         ...,\n  \
    \       [ 42, 153, 153, ...,   0,   0,   0],\n         [ 21,  76,  76, ...,  \
    \ 0,   0,   0],\n         [ 59,  76,  76, ...,   0,   0,   0]],\n\n        [[\
    \  0,   0,   0, ...,   0,   0,   0],\n         [  0,   0,   0, ...,   0,   0,\
    \   0],\n         [  0,   0,   0, ...,   0,   0,   0],\n         ...,\n      \
    \   [  0,   0,   0, ...,   0,   0,   0],\n         [  0,   0,   0, ...,   0, \
    \  0,   0],\n         [  0,   0,   0, ...,   0,   0,   0]],\n\n        [[  0,\
    \   0,   0, ...,   0,   0,   0],\n         [  0,   0,   0, ...,   0,   0,   0],\n\
    \         [  0,   0,   0, ...,   0,   0,   0],\n         ...,\n         [  0,\
    \   0,   0, ...,   0,   0,   0],\n         [  0,   0,   0, ...,   0,   0,   0],\n\
    \         [  0,   0,   0, ...,   0,   0,   0]]],\n\n\n       [[[  0,   0,   0,\
    \ ...,   0,   0,   0],\n         [  0,   0,   0, ...,   0,   0,   0],\n      \
    \   [  0,   0,   0, ...,   0,   0,   0],\n         ...,\n         [ 42, 153, 153,\
    \ ...,   0,   0,   0],\n         [ 21,  76,  76, ...,   0,   0,   0],\n      \
    \   [ 59,  76,  76, ...,   0,   0,   0]],\n\n        [[  0,   0,   0, ...,   0,\
    \   0,   0],\n         [  0,   0,   0, ...,   0,   0,   0],\n         [  0,  \
    \ 0,   0, ...,   0,   0,   0],\n         ...,\n         [  0,   0,   0, ..., \
    \  0,   0,   0],\n         [  0,   0,   0, ...,   0,   0,   0],\n         [  0,\
    \   0,   0, ...,   0,   0,   0]],\n\n        [[  0,   0,   0, ...,   0,   0, \
    \  0],\n         [  0,   0,   0, ...,   0,   0,   0],\n         [  0,   0,   0,\
    \ ...,   0,   0,   0],\n         ...,\n         [  0,   0,   0, ...,   0,   0,\
    \   0],\n         [  0,   0,   0, ...,   0,   0,   0],\n         [  0,   0,  \
    \ 0, ...,   0,   0,   0]]],\n\n\n       [[[  0,   0,   0, ...,   0,   0,   0],\n\
    \         [  0,   0,   0, ...,   0,   0,   0],\n         [  0,   0,   0, ...,\
    \   0,   0,   0],\n         ...,\n         [ 42, 153, 153, ...,   0,   0,   0],\n\
    \         [ 21,  76,  76, ...,   0,   0,   0],\n         [ 59,  76,  76, ...,\
    \   0,   0,   0]],\n\n        [[  0,   0,   0, ...,   0,   0,   0],\n        \
    \ [  0,   0,   0, ...,   0,   0,   0],\n         [  0,   0,   0, ...,   0,   0,\
    \   0],\n         ...,\n         [  0,   0,   0, ...,   0,   0,   0],\n      \
    \   [  0,   0,   0, ...,   0,   0,   0],\n         [  0,   0,   0, ...,   0, \
    \  0,   0]],\n\n        [[  0,   0,   0, ...,   0,   0,   0],\n         [  0,\
    \   0,   0, ...,   0,   0,   0],\n         [  0,   0,   0, ...,   0,   0,   0],\n\
    \         ...,\n         [  0,   0,   0, ...,   0,   0,   0],\n         [  0,\
    \   0,   0, ...,   0,   0,   0],\n         [  0,   0,   0, ...,   0,   0,   0]]]],\
    \ dtype=uint8))])"
_last_episode_starts:
  desc: null
  value: '[ True  True  True  True  True  True  True  True]'
_last_original_obs:
  desc: null
  value: None
_episode_num:
  desc: null
  value: 0
use_sde:
  desc: null
  value: 'False'
sde_sample_freq:
  desc: null
  value: -1
_current_progress_remaining:
  desc: null
  value: 1.0
_stats_window_size:
  desc: null
  value: 100
ep_info_buffer:
  desc: null
  value: deque([], maxlen=100)
ep_success_buffer:
  desc: null
  value: deque([], maxlen=100)
_n_updates:
  desc: null
  value: 0
_custom_logger:
  desc: null
  value: 'False'
env:
  desc: null
  value: <stable_baselines3.common.vec_env.vec_transpose.VecTransposeImage object
    at 0x7f857b7f8210>
_vec_normalize_env:
  desc: null
  value: None
observation_space:
  desc: null
  value: 'Dict(''badges'': MultiBinary(8), ''events'': MultiBinary(1400), ''health'':
    Box(0.0, 1.0, (1,), float32), ''level'': Box(-1.0, 1.0, (8,), float32), ''map'':
    Box(0, 255, (1, 48, 48), uint8), ''recent_actions'': MultiDiscrete([7 7 7]), ''screens'':
    Box(0, 255, (3, 72, 80), uint8))'
action_space:
  desc: null
  value: Discrete(7)
n_envs:
  desc: null
  value: 8
buffer_size:
  desc: null
  value: 1000000
batch_size:
  desc: null
  value: 32
learning_starts:
  desc: null
  value: 100
tau:
  desc: null
  value: 1.0
gamma:
  desc: null
  value: 0.998
gradient_steps:
  desc: null
  value: 1
optimize_memory_usage:
  desc: null
  value: 'False'
replay_buffer:
  desc: null
  value: <stable_baselines3.common.buffers.DictReplayBuffer object at 0x7f857b6e6190>
replay_buffer_class:
  desc: null
  value: <class 'stable_baselines3.common.buffers.DictReplayBuffer'>
replay_buffer_kwargs:
  desc: null
  value: '{}'
_episode_storage:
  desc: null
  value: None
train_freq:
  desc: null
  value: 'TrainFreq(frequency=4, unit=<TrainFrequencyUnit.STEP: ''step''>)'
use_sde_at_warmup:
  desc: null
  value: 'False'
exploration_initial_eps:
  desc: null
  value: 1.0
exploration_final_eps:
  desc: null
  value: 0.01
exploration_fraction:
  desc: null
  value: 0.005
target_update_interval:
  desc: null
  value: 1250
_n_calls:
  desc: null
  value: 0
max_grad_norm:
  desc: null
  value: None
exploration_rate:
  desc: null
  value: 0.0
lr_schedule:
  desc: null
  value: <function constant_fn.<locals>.func at 0x7f857b6d76a0>
policy:
  desc: null
  value: "MultiInputPolicy(\n  (quantile_net): QuantileNetwork(\n    (features_extractor):\
    \ CombinedExtractor(\n      (extractors): ModuleDict(\n        (badges): Flatten(start_dim=1,\
    \ end_dim=-1)\n        (events): Flatten(start_dim=1, end_dim=-1)\n        (health):\
    \ Flatten(start_dim=1, end_dim=-1)\n        (level): Flatten(start_dim=1, end_dim=-1)\n\
    \        (map): NatureCNN(\n          (cnn): Sequential(\n            (0): Conv2d(1,\
    \ 32, kernel_size=(8, 8), stride=(4, 4))\n            (1): ReLU()\n          \
    \  (2): Conv2d(32, 64, kernel_size=(4, 4), stride=(2, 2))\n            (3): ReLU()\n\
    \            (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n        \
    \    (5): ReLU()\n            (6): Flatten(start_dim=1, end_dim=-1)\n        \
    \  )\n          (linear): Sequential(\n            (0): Linear(in_features=256,\
    \ out_features=256, bias=True)\n            (1): ReLU()\n          )\n       \
    \ )\n        (recent_actions): Flatten(start_dim=1, end_dim=-1)\n        (screens):\
    \ NatureCNN(\n          (cnn): Sequential(\n            (0): Conv2d(3, 32, kernel_size=(8,\
    \ 8), stride=(4, 4))\n            (1): ReLU()\n            (2): Conv2d(32, 64,\
    \ kernel_size=(4, 4), stride=(2, 2))\n            (3): ReLU()\n            (4):\
    \ Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n            (5): ReLU()\n\
    \            (6): Flatten(start_dim=1, end_dim=-1)\n          )\n          (linear):\
    \ Sequential(\n            (0): Linear(in_features=1920, out_features=256, bias=True)\n\
    \            (1): ReLU()\n          )\n        )\n      )\n    )\n    (quantile_net):\
    \ Sequential(\n      (0): Linear(in_features=1950, out_features=64, bias=True)\n\
    \      (1): ReLU()\n      (2): Linear(in_features=64, out_features=64, bias=True)\n\
    \      (3): ReLU()\n      (4): Linear(in_features=64, out_features=1400, bias=True)\n\
    \    )\n  )\n  (quantile_net_target): QuantileNetwork(\n    (features_extractor):\
    \ CombinedExtractor(\n      (extractors): ModuleDict(\n        (badges): Flatten(start_dim=1,\
    \ end_dim=-1)\n        (events): Flatten(start_dim=1, end_dim=-1)\n        (health):\
    \ Flatten(start_dim=1, end_dim=-1)\n        (level): Flatten(start_dim=1, end_dim=-1)\n\
    \        (map): NatureCNN(\n          (cnn): Sequential(\n            (0): Conv2d(1,\
    \ 32, kernel_size=(8, 8), stride=(4, 4))\n            (1): ReLU()\n          \
    \  (2): Conv2d(32, 64, kernel_size=(4, 4), stride=(2, 2))\n            (3): ReLU()\n\
    \            (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n        \
    \    (5): ReLU()\n            (6): Flatten(start_dim=1, end_dim=-1)\n        \
    \  )\n          (linear): Sequential(\n            (0): Linear(in_features=256,\
    \ out_features=256, bias=True)\n            (1): ReLU()\n          )\n       \
    \ )\n        (recent_actions): Flatten(start_dim=1, end_dim=-1)\n        (screens):\
    \ NatureCNN(\n          (cnn): Sequential(\n            (0): Conv2d(3, 32, kernel_size=(8,\
    \ 8), stride=(4, 4))\n            (1): ReLU()\n            (2): Conv2d(32, 64,\
    \ kernel_size=(4, 4), stride=(2, 2))\n            (3): ReLU()\n            (4):\
    \ Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n            (5): ReLU()\n\
    \            (6): Flatten(start_dim=1, end_dim=-1)\n          )\n          (linear):\
    \ Sequential(\n            (0): Linear(in_features=1920, out_features=256, bias=True)\n\
    \            (1): ReLU()\n          )\n        )\n      )\n    )\n    (quantile_net):\
    \ Sequential(\n      (0): Linear(in_features=1950, out_features=64, bias=True)\n\
    \      (1): ReLU()\n      (2): Linear(in_features=64, out_features=64, bias=True)\n\
    \      (3): ReLU()\n      (4): Linear(in_features=64, out_features=1400, bias=True)\n\
    \    )\n  )\n)"
quantile_net:
  desc: null
  value: "QuantileNetwork(\n  (features_extractor): CombinedExtractor(\n    (extractors):\
    \ ModuleDict(\n      (badges): Flatten(start_dim=1, end_dim=-1)\n      (events):\
    \ Flatten(start_dim=1, end_dim=-1)\n      (health): Flatten(start_dim=1, end_dim=-1)\n\
    \      (level): Flatten(start_dim=1, end_dim=-1)\n      (map): NatureCNN(\n  \
    \      (cnn): Sequential(\n          (0): Conv2d(1, 32, kernel_size=(8, 8), stride=(4,\
    \ 4))\n          (1): ReLU()\n          (2): Conv2d(32, 64, kernel_size=(4, 4),\
    \ stride=(2, 2))\n          (3): ReLU()\n          (4): Conv2d(64, 64, kernel_size=(3,\
    \ 3), stride=(1, 1))\n          (5): ReLU()\n          (6): Flatten(start_dim=1,\
    \ end_dim=-1)\n        )\n        (linear): Sequential(\n          (0): Linear(in_features=256,\
    \ out_features=256, bias=True)\n          (1): ReLU()\n        )\n      )\n  \
    \    (recent_actions): Flatten(start_dim=1, end_dim=-1)\n      (screens): NatureCNN(\n\
    \        (cnn): Sequential(\n          (0): Conv2d(3, 32, kernel_size=(8, 8),\
    \ stride=(4, 4))\n          (1): ReLU()\n          (2): Conv2d(32, 64, kernel_size=(4,\
    \ 4), stride=(2, 2))\n          (3): ReLU()\n          (4): Conv2d(64, 64, kernel_size=(3,\
    \ 3), stride=(1, 1))\n          (5): ReLU()\n          (6): Flatten(start_dim=1,\
    \ end_dim=-1)\n        )\n        (linear): Sequential(\n          (0): Linear(in_features=1920,\
    \ out_features=256, bias=True)\n          (1): ReLU()\n        )\n      )\n  \
    \  )\n  )\n  (quantile_net): Sequential(\n    (0): Linear(in_features=1950, out_features=64,\
    \ bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=64, out_features=64,\
    \ bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=64, out_features=1400,\
    \ bias=True)\n  )\n)"
quantile_net_target:
  desc: null
  value: "QuantileNetwork(\n  (features_extractor): CombinedExtractor(\n    (extractors):\
    \ ModuleDict(\n      (badges): Flatten(start_dim=1, end_dim=-1)\n      (events):\
    \ Flatten(start_dim=1, end_dim=-1)\n      (health): Flatten(start_dim=1, end_dim=-1)\n\
    \      (level): Flatten(start_dim=1, end_dim=-1)\n      (map): NatureCNN(\n  \
    \      (cnn): Sequential(\n          (0): Conv2d(1, 32, kernel_size=(8, 8), stride=(4,\
    \ 4))\n          (1): ReLU()\n          (2): Conv2d(32, 64, kernel_size=(4, 4),\
    \ stride=(2, 2))\n          (3): ReLU()\n          (4): Conv2d(64, 64, kernel_size=(3,\
    \ 3), stride=(1, 1))\n          (5): ReLU()\n          (6): Flatten(start_dim=1,\
    \ end_dim=-1)\n        )\n        (linear): Sequential(\n          (0): Linear(in_features=256,\
    \ out_features=256, bias=True)\n          (1): ReLU()\n        )\n      )\n  \
    \    (recent_actions): Flatten(start_dim=1, end_dim=-1)\n      (screens): NatureCNN(\n\
    \        (cnn): Sequential(\n          (0): Conv2d(3, 32, kernel_size=(8, 8),\
    \ stride=(4, 4))\n          (1): ReLU()\n          (2): Conv2d(32, 64, kernel_size=(4,\
    \ 4), stride=(2, 2))\n          (3): ReLU()\n          (4): Conv2d(64, 64, kernel_size=(3,\
    \ 3), stride=(1, 1))\n          (5): ReLU()\n          (6): Flatten(start_dim=1,\
    \ end_dim=-1)\n        )\n        (linear): Sequential(\n          (0): Linear(in_features=1920,\
    \ out_features=256, bias=True)\n          (1): ReLU()\n        )\n      )\n  \
    \  )\n  )\n  (quantile_net): Sequential(\n    (0): Linear(in_features=1950, out_features=64,\
    \ bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=64, out_features=64,\
    \ bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=64, out_features=1400,\
    \ bias=True)\n  )\n)"
n_quantiles:
  desc: null
  value: 200
batch_norm_stats:
  desc: null
  value: '[]'
batch_norm_stats_target:
  desc: null
  value: '[]'
exploration_schedule:
  desc: null
  value: <function get_linear_fn.<locals>.func at 0x7f857b7d4ea0>
_logger:
  desc: null
  value: <stable_baselines3.common.logger.Logger object at 0x7f8550468250>
